@using JJMasterData.Web.Components


@{
    Dictionary<string, List<CodeEditorHint>>? codeEditorHints = null;
    if (ViewData.TryGetValue("CodeEditorHints", out var hintsObj) && hintsObj is List<CodeEditorHint> hintsList)
    {
        codeEditorHints = hintsList.GroupBy(h => h.Language)
            .ToDictionary(g => g.Key, g => g.ToList());
    }
}

<script>var require = {paths: {'vs': '@(Context.Request.PathBase)/_content/JJMasterData.Web/js/monaco/'}};</script>
<script src="~/_content/JJMasterData.Web/js/monaco/loader.js"></script>
<script src="~/_content/JJMasterData.Web/js/monaco/editor/editor.main.js"></script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        require(['vs/editor/editor.main'],function (){
            const hints = @Json.Serialize(codeEditorHints);
            Object.keys(hints).forEach(lang => {
                monaco.languages.registerCompletionItemProvider(lang, {
                    provideCompletionItems: function(model, position) {
                        const suggestions = hints[lang].map(h => ({
                            label: h.label,
                            kind: 17,
                            insertText: h.insertText,
                            detail: h.details
                        }));
                        return { suggestions };
                    }
                });
            });
            const observer = new MutationObserver(mutations => {
                mutations.forEach(mutation => {
                    if (mutation.type === "attributes" && mutation.attributeName === "data-bs-theme") {
                        const theme = document.documentElement.getAttribute("data-bs-theme");
                        monaco.editor.setTheme(theme === "dark" ? "vs-dark" : "vs");
                    }
                });
            });

            observer.observe(document.documentElement, { attributes: true, attributeFilter: ["data-bs-theme"] });
        });
    });
</script>