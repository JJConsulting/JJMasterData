@using JJMasterData.Commons.Util
@using System.Text
@using JJMasterData.Commons.Localization
@using JJMasterData.Core.DataDictionary.Actions.Abstractions
@using JJMasterData.Core.DataDictionary.Actions.UserCreated
@using JJMasterData.Web.Areas.DataDictionary.Models.ViewModels
@using JJMasterData.Core.Web

@using JJMasterData.Commons.Localization
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<JJMasterDataResources> StringLocalizer

@model ActionsListDetailsViewModel

@{
    var sortableClass = string.Empty;
}
@if (Model.Actions?.Count > 1)
{
    sortableClass = "jjsortable";
    <script language="javascript" type="text/javascript">
        $(document).ready(function () {
            jjdictionary.doActionSortable('@Model.Context.ToString()', '@GetUrlSort()','@StringLocalizer["Unexpected error"]');
        });
    </script>
}

<div class="row mt-3">
    <div class="col-sm-12">
        <div class="btn-group">
            <button type="button" class="@BootstrapHelper.DefaultButton dropdown-toggle" @BootstrapHelper.GetDataToggle("dropdown") aria-haspopup="true" aria-expanded="false">
                <span class="fa fa-plus-circle"></span>&nbsp;@StringLocalizer["New Action"]&nbsp; <span class="caret"></span>
            </button>
            <ul class="dropdown-menu">
                <li class="dropdown-item"><a class="dropdown-link" href="javascript: void(0);" onclick="@GetCmdAdd(typeof(UrlRedirectAction))">@StringLocalizer["Url Redirect"]</a></li>
                <li class="dropdown-item"><a class="dropdown-link" href="javascript: void(0);" onclick="@GetCmdAdd(typeof(InternalAction))">@StringLocalizer["Internal Redirect"]</a></li>
                <li class="dropdown-item"><a class="dropdown-link" href="javascript: void(0);" onclick="@GetCmdAdd(typeof(SqlCommandAction))">@StringLocalizer["Sql Command"]</a></li>
                <li class="dropdown-item"><a class="dropdown-link" href="javascript: void(0);" onclick="@GetCmdAdd(typeof(ScriptAction))">@StringLocalizer["JavaScript Script"]</a></li>
            </ul>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-sm-12">
        <ul class="list-group @sortableClass" id="sortable_@Model.Context.ToString()">
            @foreach (var action in Model.Actions!)
            {
                <li class="list-group-item" id="@action.Name">
                    <div style="height: 33px;">
                        <div style="float: left; margin-top: 10px;">
                            <span class="@action.Icon.GetCssClass() fa-fw"></span>&nbsp;
                            @action.Name
                            &nbsp;
                        </div>
                        <div class=@BootstrapHelper.PullRight>
                            <button class="@BootstrapHelper.DefaultButton btn-small" type="button" onclick="@GetCmdEdit(action)">
                                <span class="fa fa-pencil"></span>
                            </button>
                            &nbsp;

                            @if (action.IsUserCreated)
                            {
                                <button class="@BootstrapHelper.DefaultButton btn-small" style="margin-left:14px;" type="button"
                                        onclick="@GetCmdDelete(action)">
                                    <span class="fa fa-trash"></span>
                                </button>
                            }
                            else
                            {
                                <input type="checkbox"
                                       value="btninsert"
                                       @(action.IsVisible ? "checked=\"checked\"" : "")
                                       data-toggle="toggle"
                                       data-size="small"
                                       data-on="On"
                                       data-off="Off"
                                       onchange="jjdictionary.setDisableAction($(this).prop('checked'),'@GetUrlDisable(action)','@StringLocalizer["Unexpected error"]');">
                            }
                        </div>
                    </div>
                </li>
            }
        </ul>

    </div>
</div>


@functions {

    public string GetCmdEdit(BasicAction action)
    {
        var script = new StringBuilder();
        script.Append("popup.show('");
        script.Append(Model.Context.ToString().FirstCharToUpper());
        script.Append(" Action', '");
        script.Append(Url.Action("Edit", "Actions",
            new { dictionaryName = Model.DictionaryName, actionName = action.Name, context = Model.Context, fieldName = Model.FieldName }));
        script.Append("');");

        return script.ToString();
    }

    public string GetCmdAdd(Type actionType)
    {
        var script = new StringBuilder();
        script.Append("popup.show('");
        script.Append(Model.Context.ToString().FirstCharToUpper());
        script.Append(" Action', '");
        script.Append(Url.Action("Add", "Actions",
            new { dictionaryName = Model.DictionaryName, actionType = actionType.Name, context = Model.Context, fieldName = Model.FieldName }));
        script.Append("');");

        return script.ToString();
    }

    public string GetCmdDelete(BasicAction action)
    {
        var script = new StringBuilder();
        script.Append("jjdictionary.deleteAction('");
        script.Append(action.Name);
        script.Append("', '");
        script.Append(Url.Action("Remove", "Actions",
            new { dictionaryName = Model.DictionaryName, actionName = action.Name, context = Model.Context, fieldName = Model.FieldName }));
        script.Append("', '");
        script.Append(Translate.Key("Are you sure you want to delete [{0}] action?", action.Name));
        script.Append("');");

        return script.ToString();
    }

    public string? GetUrlDisable(BasicAction action)
    {
        return Url.Action("EnableDisable", "Actions",
            new { dictionaryName = Model.DictionaryName, actionName = action.Name, context = Model.Context, fieldName = Model.FieldName });
    }

    public string? GetUrlSort()
    {
        return Url.Action("Sort", "Actions",
            new { dictionaryName = Model.DictionaryName, fieldName = Model.FieldName });
    }
}