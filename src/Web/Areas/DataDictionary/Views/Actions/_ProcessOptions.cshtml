@using JJMasterData.Commons.Localization
@using JJMasterData.Core.Web
@using Microsoft.AspNetCore.Mvc.TagHelpers

@using JJMasterData.Commons.Localization
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<JJMasterDataResources> StringLocalizer

@model ProcessOptions

<link href="~/_content/JJMasterData.Web/js/codemirror/lib/codemirror.css" rel="stylesheet" />
<link href="~/_content/JJMasterData.Web/js/codemirror/addon/hint/show-hint.css" rel="stylesheet" />
<script src="~/_content/JJMasterData.Web/js/codemirror/lib/codemirror.js" type="text/javascript"></script>
<script src="~/_content/JJMasterData.Web/js/codemirror/mode/sql/sql.js" type="text/javascript"></script>
<script src="~/_content/JJMasterData.Web/js/codemirror/addon/hint/show-hint.js"type="text/javascript"></script>
<script src="~/_content/JJMasterData.Web/js/codemirror/addon/hint/sql-hint.js" type="text/javascript"></script>

<script lang="javascript" type="text/javascript">

    $(document).ready(function () {
        buidCodeMirror('ProcessOptions_CommandBeforeProcess');
        buidCodeMirror('ProcessOptions_CommandAfterProcess');

        $("a[@BootstrapHelper.DataToggle='tab']").on("shown.bs.tab", function (e) {
            refreshCodeMirror();
        });

        $("#cboSqlEvent").change(function () {
            var selectedVal = $("#cboSqlEvent").selectpicker('val');
            if (selectedVal == "1") {
                $("#divCommandBefore").css("display", "");
                $("#divCommandAfter").css("display", "none");
            } else {
                $("#divCommandBefore").css("display", "none");
                $("#divCommandAfter").css("display", "");
            }
            refreshCodeMirror();
        });

    });

    function refreshCodeMirror() {
        var cm1 = $(".CodeMirror")[0];
        if (cm1 && cm1.CodeMirror) {
            cm1.CodeMirror.refresh();
        }

        var cm2 = $(".CodeMirror")[1];
        if (cm2 && cm2.CodeMirror) {
            cm2.CodeMirror.refresh();
        }
    }

    function buidCodeMirror(fieldName) {
        var cm = CodeMirror.fromTextArea(document.getElementById(fieldName), {
            mode: "text/x-sql",
            indentWithTabs: true,
            smartIndent: true,
            lineNumbers: true,
            matchBrackets: true,
            autofocus: true,
            autohint: true,
            extraKeys: { "Ctrl-Space": "autocomplete" },
            hintOptions: {
                tables: {
                    AppUser: ["USR_ID", "USR_USERNAME", "USR_FIRSTNAME", "USR_LASTNAME", "USR_EMAIL", "USR_ISDISABLED"],
                    AppMenu: ["MNU_ID", "MNU_ORDER", "MNU_ICON", "MNU_LABEL", "MNU_TYPE", "MNU_ACTION"],
                }
            }
        });

        cm.setSize(null, 250);

        // Register our custom Codemirror hint plugin.
        CodeMirror.registerHelper('hint', 'dictionaryHint', function (editor) {
            var dictionary = @Html.Raw(ViewBag.HintDictionary);
            var cur = editor.getCursor();
            var curLine = editor.getLine(cur.line);
            var start = cur.ch;
            var end = start;
            return {
                list: dictionary,
                from: CodeMirror.Pos(cur.line, start),
                to: CodeMirror.Pos(cur.line, end)
            }
        });

        cm.on("keyup", function (cm, event) {
            if (!cm.state.completionActive && /*Enables keyboard navigation in autocomplete list*/
                event.keyCode == 219) {       /*Enter - do not open autocomplete list just after item has been selected in it*/
                CodeMirror.commands.autocomplete(cm, CodeMirror.hint.dictionaryHint, { completeSingle: false });
                //CodeMirror.showHint(cm, CodeMirror.hint.dictionaryHint);
            }
        });
    }

</script>


<div class="row" style="margin-bottom:5px">

    <div class="col-sm-12">
        <label class="@BootstrapHelper.Label" @BootstrapHelper.GetDataToggle("tooltip")>@StringLocalizer["Sql Command"]</label>
    </div>
    <div class="col-sm-4">
        <select class="form-control form-select selectpicker" id="cboSqlEvent" name="cboSqlEvent">
            <option value="1" selected="selected" data-content="<span class='fa fa-flash fa-lg fa-fw' style='color:#FFC90E;'></span>&nbsp;@StringLocalizer["Before starting the process"]">@StringLocalizer["Before starting the process"]</option>
            <option value="2" data-content="<span class='fa fa-flash fa-lg fa-fw' style='color:#FFC90E;'></span>&nbsp;@StringLocalizer["After finishing the process"]">@StringLocalizer["After finishing the process"]</option>
        </select>
    </div>
    <div class="col-sm-8 @BootstrapHelper.TextRight" style="margin-top: 15px;">
        <span class="small text-info">@StringLocalizer["(Type Ctrl+Space to AutoComplete)"]&nbsp;</span>
    </div>

</div>
<div class="row">
    <div id="divCommandBefore" class="@BootstrapHelper.FormGroup col-sm-12">
        <div class="well" style="margin-bottom:0px">
            <textarea class="form-control" cols="20" id="ProcessOptions_CommandBeforeProcess" name="ProcessOptions.CommandBeforeProcess" rows="5">@Model.CommandBeforeProcess</textarea>
        </div>
    </div>

    <div id="divCommandAfter" class="@BootstrapHelper.FormGroup col-sm-12" style="display:none;">
        <div class="well" style="margin-bottom:0px">
            <textarea class="form-control" cols="20" id="ProcessOptions_CommandAfterProcess" name="ProcessOptions.CommandAfterProcess" rows="5">@Model.CommandAfterProcess</textarea>
        </div>
    </div>

</div>
<hr />
<div class="row">
    <div class="@BootstrapHelper.FormGroup col-sm-3">
        <label class="@BootstrapHelper.Label" @BootstrapHelper.GetDataToggle("tooltip") data-placement="bottom">@StringLocalizer["Scope"]</label>
        <select class="form-control form-select" id="ProcessOptions_Scope" name="ProcessOptions.Scope">
            @foreach (ProcessScope scope in Enum.GetValues(typeof(ProcessScope)))
            {
                if (Model.Scope == scope)
                {
                    <option value="@((int)scope)" selected="selected">@scope</option>
                }
                else
                {
                    <option value="@((int)scope)">@scope</option>
                }
            }

        </select>

    </div>

    <div class="col-sm-9">
        <span class="text-info fa fa-info-circle"></span>
        <span class="small">
            <em>@StringLocalizer["Scope of execution of the process. "]</em><br />
            <b>@StringLocalizer["Global"]</b>&nbsp;@StringLocalizer["Only one process from this dictionary can be run at a time. "]<br />
            @StringLocalizer["and all users will be able to view the latest log and execution of an ongoing process."]
            <br />
            <b>@StringLocalizer["User"]</b>&nbsp;@StringLocalizer["Several users can run this process simultaneously, but only see the log and one run of your process."]
        </span>

    </div>
</div>
