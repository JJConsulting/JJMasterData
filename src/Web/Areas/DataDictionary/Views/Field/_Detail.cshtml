@using JJMasterData.Commons.Data.Entity.Models
@using JJMasterData.Commons.Validations
@using JJMasterData.Core.DataDictionary.Models
@using JJMasterData.Core.DataDictionary.Models.Actions
@using JJMasterData.Core.Events.Abstractions
@using JJMasterData.Core.Events.Extensions
@using JJMasterData.Core.UI
@using JJMasterData.Core.UI.Components
@using JJMasterData.Core.UI.Events.Abstractions
@using JJMasterData.Web.Areas.DataDictionary.Models.ViewModels

@model JJMasterData.Core.DataDictionary.Models.FormElementField
@inject IStringLocalizer<MasterDataResources> StringLocalizer
@inject IOptionsSnapshot<MasterDataWebOptions> Options

@inject IFormEventHandlerResolver FormEventHandlerResolver

@inject IGridEventHandlerResolver GridEventHandlerResolver

@{
    string currentTab = ViewBag.Tab ?? "#div-general";

    string Active(string tab)
    {
        return currentTab == tab ? "active show" : string.Empty;
    }
}

@{
    string elementName = ViewBag.ElementName;
    var formEventHandler = FormEventHandlerResolver.GetFormEventHandler(elementName) as IEventHandler ?? GridEventHandlerResolver.GetGridEventHandler(elementName);

    var isCustomizedField = formEventHandler?.GetCustomizedFields().Contains(Model.Name) ?? false;
    
}

<script lang="javascript" type="text/javascript">
    function save() {
        SpinnerOverlay.show();
        const url = `@Url.Action("Save", new { elementName })`;
        const form = document.querySelector("form");
        form.action = url;
        form.submit();
    }
    
    function copy() {
        SpinnerOverlay.show();
        const url = `@Url.Action("Copy", new { elementName })`;
        const form = document.querySelector("form");
        form.action = url;
        form.submit();
    }
    
    function showSuccess(fieldName) {
        document.addEventListener("DOMContentLoaded", function () {
            const successDiv = document.getElementById("div-success");
            successDiv.style.display = "";
            window.parent.document.querySelector('#current_field').value = fieldName;
        });
    }
</script>

@Html.HiddenFor(model => Model.PanelId)
<div class="container-fluid">
    <div class="row">
        <div class="col-sm-12">
            @Html.Raw(ViewBag.Error)
        </div>
    </div>
    <ul id="field-nav" class="nav nav-underline">
        <li class="nav-item" id="nav-general" @Active("#div-general")>
            <a class="nav-link" @BootstrapHelper.GetDataToggle("tab") data-bs-target="#div-general" href="#div-general">@StringLocalizer["General"]</a>
        </li>
        <li class="nav-item" id="nav-component" @Active("#div-component")>
            <a class="nav-link" @BootstrapHelper.GetDataToggle("tab") data-bs-target="#div-component" href="#div-component">@StringLocalizer["Component"]</a>
        </li>
        <li class="nav-item" id="nav-advanced" @Active("#div-advanced")>
            <a class="nav-link" @BootstrapHelper.GetDataToggle("tab") data-bs-target="#div-advanced" href="#div-advanced">@StringLocalizer["Expressions"]</a>
        </li>
        <li class="nav-item" id="nav-layout" @Active("#div-layout")>
            <a class="nav-link" @BootstrapHelper.GetDataToggle("tab") data-bs-target="#div-layout" href="#div-layout">@StringLocalizer["Layout"]</a>
        </li>
    </ul>

    <div class="tab-content" style="margin-top: 20px;">
        <div id="div-general" class="tab-pane fade @Active("#div-general")">
            <div class="row">

                @if (Validate.IsDatabaseKeyword(Model.Name))
                {
                    <alert title="@StringLocalizer["Warning"]" 
                           color="Warning" 
                           icon="IconType.Warning"
                           message="@StringLocalizer["This field uses a reserved keyword of the database in its name."]"/>
                }
                <div class="@BootstrapHelper.FormGroup col-sm-6 required">
                    <label class="@BootstrapHelper.Label " asp-for="Name"></label>
                    <tooltip title="@StringLocalizer["Name of the field at the database."]"/>
                    @if (isCustomizedField)
                    {
                        <input asp-for="Name" maxlength="64" class="form-control" readonly="readonly"/>
                    }
                    else
                    {
                        <input asp-for="Name" maxlength="64" class="form-control"/>
                    }
                    <input type="hidden" id="originalName" name="originalName" value="@ViewBag.OriginalName"/>
                </div>
                <div class="@BootstrapHelper.FormGroup col-sm-6">
                    <label class="@BootstrapHelper.Label " asp-for="Label"></label>
                    <tooltip title="@StringLocalizer["Name of the field displayed at the form."]"/>
                        
                    @Html.TextBoxFor(model => model.Label, new { @class = "form-control" })
                </div>
            </div>

            <div class="row">
                <div class="@BootstrapHelper.FormGroup col-sm-6 required">
                    <label class="@BootstrapHelper.Label " asp-for="Filter.Type"></label>
                    <select asp-for="Filter.Type" class="form-control form-select" asp-items="Html.GetEnumSelectList<FilterMode>()"></select>
                </div>
                <div class="@BootstrapHelper.FormGroup col-sm-6 required">
                    <label class="@BootstrapHelper.Label " asp-for="DataBehavior"></label>
                    <tooltip title=@StringLocalizer["Real - Used for both GET and SET.</br>Virtual - NOT used in any operation.<br>ReadOnly - Used only in GET.<br>WriteOnly - Used only in SET."]/>
                    <select asp-for="DataBehavior" class="form-control form-select" asp-items="Html.GetEnumSelectList<FieldBehavior>()"></select>
                </div>
            </div>
            
            <div class="row">
                <div class="@BootstrapHelper.FormGroup col-sm-6 required">
                    <label class="@BootstrapHelper.Label " asp-for="DataType"></label>
                    @{
                    var dataTypeList = Html.GetEnumSelectList<FieldType>().ToList();

                    foreach (var dataType in dataTypeList)
                    dataType.Group.Name = StringLocalizer[dataType.Group.Name];
                    }
                    <select asp-for="DataType" class="form-control form-select" asp-items="dataTypeList.OrderBy(f => f.Group.Name)"></select>
                </div>
                <div class="@BootstrapHelper.FormGroup col-sm-6">
                    <label class="@BootstrapHelper.Label " asp-for="Size"></label>
                    <tooltip title="@StringLocalizer["Field size. Use -1 to use the MAX keyword."]"/>
                    <input asp-for="Size" class="form-control"/>
                </div>
            </div>
            
            <div class="row">
                <div class="@BootstrapHelper.FormGroup col-sm-4 required">
                    <checkbox for="IsRequired" switch="true" />
                </div>
                <div class="@BootstrapHelper.FormGroup col-sm-4 required">
                    <checkbox for="IsPk" switch="true" />
                </div>
                <div class="@BootstrapHelper.FormGroup col-sm-4 required">
                    <checkbox for="AutoNum" switch="true" />
                </div>
            </div>

            <div class="row">
                <div class="@BootstrapHelper.FormGroup col-sm-4 required">
                    <checkbox for="Export" switch="true"/>
                </div>
                <div class="@BootstrapHelper.FormGroup col-sm-4 required">
                    <checkbox tooltip="@StringLocalizer["When changing the value, it performs a POST request to the server and reloads all form fields."]" for="AutoPostBack" switch="true"/>
                </div>
                <div class="@BootstrapHelper.FormGroup col-sm-4 required">
                    <checkbox tooltip="@StringLocalizer["Option used to prevent XSS attacks. Uncheck this option if you really trust the origin of your data."]" for="EncodeHtml" switch="true"/>
                </div>
                @if (Options.Value.SupportNetFramework)
                {
                    <div class="@BootstrapHelper.FormGroup col-sm-4 required">
                        <checkbox tooltip="@StringLocalizer["Validates possibly dangerous values on request on .NET Framework 4.8."]" for="ValidateRequest" switch="true"/>
                    </div>
                }
            </div>

        </div>
        <div id="div-component" class="tab-pane fade @Active("#div-component")">
            <div class="row">
                <div class="@BootstrapHelper.FormGroup col-sm-4 required">
                    <label class="@BootstrapHelper.Label " asp-for="Component"></label>
                    @{
                        var componentList = Html.GetEnumSelectList<FormComponent>().ToList();

                        foreach (var component in componentList)
                            component.Group.Name = StringLocalizer[component.Group.Name];
                    }
                    <select asp-for="Component" class="form-control form-select" onchange="this.form.submit();" asp-items="componentList.OrderBy(c=>c.Group.Name).ThenBy(c=>c.Text)"></select>
                </div>

                @if (Model.Component is FormComponent.Number or FormComponent.Currency or FormComponent.Slider)
                {
                    <div class="@BootstrapHelper.FormGroup col-sm-4">
                        <label class="@BootstrapHelper.Label " asp-for="NumberOfDecimalPlaces"></label>
                        @Html.TextBoxFor(model => model.NumberOfDecimalPlaces, new { type = "number", @class = "form-control" })
                    </div>
                }

                @await Html.PartialAsync("_Attributes", Model)

            </div>

            @if (Model.Component is FormComponent.Text 
                or FormComponent.Email 
                or FormComponent.Number 
                or FormComponent.Cep 
                or FormComponent.Cnpj 
                or FormComponent.Cpf 
                or FormComponent.CnpjCpf)
            {
                if (ViewBag.OriginalName == null || ViewBag.OriginalName == "")
                {
                    <hr/>
                    <div class="col-sm-12">
                        <span class="text-info fa fa-info-circle"></span>
                        <span class="small">
                            <b>@StringLocalizer["Actions"]</b>
                            <br/>
                            <em>@StringLocalizer["This component allows you to add actions, but you must save it to add actions later."]</em>
                        </span>
                    </div>
                }
                else
                {
                    @await Html.PartialAsync("~/Areas/DataDictionary/Views/Actions/_List.cshtml", new ActionsListDetailsViewModel
                           {
                               Source = ActionSource.Field,
                               ElementName = ViewBag.ElementName,
                               Actions = Model.Actions.GetAllSorted(),
                               FieldName = ViewBag.OriginalName
                           })
                }
            }
            else if (Model.Component is FormComponent.ComboBox or FormComponent.Search or FormComponent.RadioButtonGroup)
            {
                @await Html.PartialAsync("_DataItem", Model)
            }
            else if (Model.Component is FormComponent.Lookup)
            {
                @await Html.PartialAsync("_Lookup", Model)
            }
            else if (Model.Component is FormComponent.File)
            {
                @await Html.PartialAsync("_DataFile", Model)
            }

        </div>
        <div id="div-advanced" class="tab-pane fade @Active("#div-advanced")">
            <div class="row">
                <div class="@BootstrapHelper.FormGroup col-sm-12">
                    <expression for="DefaultValue" icon="IconType.Check" tooltip="@StringLocalizer["Expression for a default value. See the docs for more information."]"/>
                </div>
                <div class="@BootstrapHelper.FormGroup col-sm-12 required">
                    <expression for="VisibleExpression" icon="IconType.Eye" tooltip="@StringLocalizer["Boolean expression to show the field. See the docs for more information."]"/>
                </div>
                <div class="@BootstrapHelper.FormGroup col-sm-12 required">
                    <expression for="EnableExpression" icon="IconType.Pencil" tooltip="@StringLocalizer["Boolean expression to enable the field. See the docs for more information."]"/>
                </div>
                <div class="@BootstrapHelper.FormGroup col-sm-12">
                    <expression for="TriggerExpression" icon="IconType.Bolt" tooltip="@StringLocalizer["Expression triggered whenever a field performs a POST to the server. See the documentation for more information."]"/>
                </div>
            </div>
            <div class="row">
                <span> <span class="fa fa-info-circle" style="color:#005a86"></span> @StringLocalizer["Read more about expressions "]<a target="_blank" href="https://md.jjconsulting.tech/articles/expressions.html">@StringLocalizer[" in this link."]</a></span>
            </div>
        </div>
        <div id="div-layout" class="tab-pane fade @Active("#div-layout")">
            <div class="@BootstrapHelper.FormGroup col-sm-12">
                <label class="@BootstrapHelper.Label " asp-for="HelpDescription">
                </label>
                <tooltip title="@StringLocalizer["The help text will be displayed like this on the form."]"/>
                @Html.TextBoxFor(model => model.HelpDescription, new { @class = "form-control" })
            </div>
            <div class="row">
                <div class="@BootstrapHelper.FormGroup col-sm-4">
                    <label class="@BootstrapHelper.Label " asp-for="CssClass"></label>
                    <tooltip title="@StringLocalizer["Class name (CSS) to be assigned to object group rendering."]"/>

                    @Html.TextBoxFor(model => model.CssClass, new { @class = "form-control" })
                </div>

                <div class="@BootstrapHelper.FormGroup col-sm-4">
                    <label class="@BootstrapHelper.Label " asp-for="LineGroup"></label>
                    <tooltip title="@StringLocalizer["Row number at the form, used to break the line in the form flex layout."]"/>

                    @Html.TextBoxFor(model => model.LineGroup, new { type = "number", @class = "form-control" })
                </div>

                <div class="@BootstrapHelper.FormGroup col-sm-4 required">
                    <label class="@BootstrapHelper.Label " asp-for="GridAlignment"></label>
                    <select asp-for="GridAlignment"  class="form-control form-select" asp-items="Html.GetEnumSelectList<GridAlignment>()"></select>
                </div>
            </div>
        </div>
        
        </div>
    
    <div class="row">
        <div class="col-sm-12">
            @if (isCustomizedField)
            {
                <alert title="@StringLocalizer["Customized Field"]"
                       message="@StringLocalizer["This field is inside an event handler and its behavior can be modified at runtime. You also cannot delete or modify your name."]" 
                       icon="IconType.SolidCircleInfo" 
                       color="Info"/>
            }
        </div>
    </div>
</div>
<div class="jjtoolbar mb-1 col-sm-12">
    <hr/>
    <link-button 
        text="Save" 
        color="Primary" 
        icon="Check" 
        on-client-click="save()"/>
    <link-button
        asp-action="Index"
        asp-route-fieldName="@Model.Name"
        asp-route-elementName="@ViewBag.ElementName"
        text="Refresh" 
        icon="Refresh"/>
    
    @if (!isCustomizedField)
    {
        <link-button 
            asp-action="Delete"
            asp-route-fieldName="@Model.Name"
            asp-route-elementName="@ViewBag.ElementName"
            text="Delete" 
            icon="SolidTrashCan" />
    }
    <link-button 
        text="Copy"  
        icon="FilesO" 
        on-client-click="copy()"/>
</div>