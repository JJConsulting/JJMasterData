@using System.Text
@using JJMasterData.Commons.Data.Entity.Models
@using JJMasterData.Commons.Extensions
@using JJMasterData.Core.DataDictionary.Models
@using Microsoft.AspNetCore.Mvc.TagHelpers


@model JJMasterData.Core.DataDictionary.Models.FormElementField
@inject IOptionsSnapshot<MasterDataWebOptions> Options

@inject IStringLocalizer<MasterDataResources> StringLocalizer

@{
    ViewData["Title"] = $"{ViewData["ElementName"]} - {StringLocalizer["Fields"]}";
    ViewData["UseCodeMirror"] = true;
    var isForm = ViewData["IsForm"] is true;
    var elementName = ViewData["ElementName"]!.ToString();
    Layout = !isForm ? Options.Value.ModalLayoutPath : Options.Value.LayoutPath;
}

@functions{
    string GetFieldDataTypeText(FormElementField field)
    {
        var sql = new StringBuilder();
        sql.Append(StringLocalizer[field.DataType.GetDisplayName()]);

        if (field.DataType is FieldType.Varchar or FieldType.NVarchar or FieldType.DateTime2)
        {
            sql.Append('(');
            sql.Append(field.Size == -1 ? "MAX" : field.Size);
            sql.Append(')');
        }

        if (field.IsRequired)
            sql.Append(" NOT NULL");

        if (field is { AutoNum: true, DataType: not FieldType.UniqueIdentifier })
            sql.Append(" IDENTITY ");

        return sql.ToString();
    }


    static IconType GetFontAwesomeIconClass(FormComponent component)
    {
        return component switch
        {
            FormComponent.Text => IconType.KeyboardO,
            FormComponent.TextArea => IconType.AlignLeft,
            FormComponent.Hour => IconType.ClockO,
            FormComponent.Date => IconType.Calendar,
            FormComponent.DateTime => IconType.Calendar,
            FormComponent.Password => IconType.Lock,
            FormComponent.Email => IconType.Envelope,
            FormComponent.Number => IconType.Calculator,
            FormComponent.ComboBox => IconType.CaretDown,
            FormComponent.Search => IconType.Search,
            FormComponent.RadioButtonGroup => IconType.RegularCircleDot,
            FormComponent.CheckBox => IconType.CheckSquare,
            FormComponent.Cnpj => IconType.SolidBuildingColumns,
            FormComponent.Cpf => IconType.RegularIdCard,
            FormComponent.CnpjCpf => IconType.RegularIdBadge,
            FormComponent.Currency => IconType.Dollar,
            FormComponent.Tel => IconType.Phone,
            FormComponent.Cep => IconType.MapMarker,
            FormComponent.Lookup => IconType.Binoculars,
            FormComponent.File => IconType.File,
            FormComponent.Slider => IconType.Sliders,
            FormComponent.Color => IconType.SolidPaintbrush,
            FormComponent.Icon => IconType.SolidIcons,
            FormComponent.Percentage => IconType.Percent,
            _ => IconType.Question
        };
    }
}


@if (isForm)
{
    <partial name="_Menu" model="@(new DataDictionaryViewModel(elementName, ViewBag.MenuId))"/>
    
    <offcanvas position="Bottom" title="@StringLocalizer["Copy From..."]" name="copy-from-offcanvas">
        <form asp-action="CopyFrom" asp-controller="Field" asp-route-elementName="@elementName">
            <div class="row">
                <div class="col-sm-4">
                    <div class="form-group">
                        <label for="copyFromElementName" class="form-label">@StringLocalizer["Element Name"]</label>
                        <select name="copyFromElementName"
                                id="copyFromElementName"
                                asp-items="@(new SelectList(ViewBag.ElementNameList, "Key", "Value"))"
                                onchange="populateCopyFromFields(this)"
                                required="required"
                                class="form-select"></select>
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="form-group">
                        <label for="copyFromFieldNames" class="form-label">@StringLocalizer["Fields"]</label>
                        <select name="copyFromFieldNames"
                                id="copyFromFieldNames"
                                required="required"
                                multiple="multiple"
                                class="form-select"></select>
                    </div>
                </div>
                <div class="col-sm-4">
                    <button class="btn btn-primary" type="submit">
                        <span class="fa-solid fa-copy"></span>&nbsp;@StringLocalizer["Copy"]
                    </button>
                </div>

            </div>
        </form>
    </offcanvas>
}

@using (Html.BeginMasterDataForm("Index", "Field"))
{
    <input type="hidden" name="selected-tab" id="selected-tab" value="@ViewBag.Tab"/>
    <div class="row">
        <div class="col-sm-3">
            <div class="input-group">
                <input id="txtFilter" name="txtFilter" onkeyup="searchFields(this);" placeholder="@StringLocalizer["Search..."]" type="text" class="form-control" data-bs-toggle="tooltip" title="@StringLocalizer["Filter by any field visible in the list"]">
                
                @if (isForm)
                {
                    <div class="input-group-text" style="cursor:pointer" data-bs-toggle="tooltip" title="@StringLocalizer["Copy From..."]" onclick="OffcanvasHelper.showOffcanvas('copy-from-offcanvas')">
                        <span class="fa-solid fa-copy"></span>
                    </div>
                }
                
                <div class="input-group-text" style="cursor:pointer" data-bs-toggle="tooltip" title="@StringLocalizer["Add"]" onclick="loadFieldDetails('@Url.Action("Add", new { elementName = elementName })', '');">
                    <span class="fa fa-plus"></span>
                </div>
            </div>
            <br/>
            <div class="jjrelative">
                <div id="field-list">
                    <div class="list-group jj-list-group jjsortable" id="sortable-grid">
                        @if (ViewBag.Fields.Count == 0)
                        {
                            <div>@StringLocalizer["No record found"]</div>
                        }
                        @for (int i = 0; i < ViewBag.Fields.Count; i++)
                        {
                            FormElementField field = ViewBag.Fields[i];
                            var fieldName = field.Name;

                            <a href="javascript:loadFieldDetails('@Url.Action("Detail", new { elementName = elementName, fieldName })', '@fieldName' );"
                               class="list-group-item @(fieldName.Equals(Model.Name) ? "active" : "")"
                               id="@fieldName">
                                <div style="height: 33px;">
                                    <div class="float-start">
                                        <b>@fieldName</b>
                                        @if (field.IsPk)
                                        {
                                            <span class="fa fa-star text-warning"  data-bs-toggle="tooltip" title="@StringLocalizer["Primary key"]"></span>
                                        }
                                        @if (field.Component is not FormComponent.Text)
                                        {
                                            <span class="@GetFontAwesomeIconClass(field.Component).GetCssClass() ms-1" data-bs-toggle="tooltip" title="@field.Component.ToString()"></span>
                                        }
                                        @if (field.Filter.Type is not FilterMode.None)
                                        {
                                            <span class="@IconType.Filter.GetCssClass() ms-1" data-bs-toggle="tooltip" title="@field.Filter.Type.ToString()"></span>
                                        }
                                        @if (field.AutoPostBack)
                                        {
                                            <span class="@IconType.SolidBoltLightning.GetCssClass() text-warning ms-1" data-bs-toggle="tooltip" title="AutoPostBack"></span>
                                        }
                                        <br>
                                        <small>
                                            @if (field.Label != null && !string.Equals(fieldName, field.Label, StringComparison.InvariantCultureIgnoreCase))
                                            {
                                                var label = field.Label.Replace("<br>", " ").Replace("<BR>", " ").Replace("<br />", " ");
                                                if (label.Length > 35)
                                                {
                                                    label = $"{label[..30]}...";
                                                }

                                                <span>@label</span>
                                                <span> - </span>
                                            }

                                            @GetFieldDataTypeText(field)
                                        </small>
                                    </div>
                                    <div class="float-end jjsortable-icon" title="@StringLocalizer["Drag and drop to move"]">
                                    </div>
                                    <span class="float-end jjsortable-span" title="@StringLocalizer["Drag and drop to move"]">
                                        @i
                                    </span>
                                </div>
                            </a>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="col-sm-9" style="padding-left:0px">
            <div class="jjrelative" id="field-details">
                <partial name="_Detail" model="Model"/>
            </div>
        </div>
        <br/>
    </div>
}

<script>
        function saveScrollPosition() {
            const listField = document.getElementById('field-list');
            if (listField) {
                sessionStorage.setItem('listFieldScrollPosition', listField.scrollTop);
            }
        }

        function restoreScrollPosition() {
            const listField = document.getElementById('field-list');
            const savedScrollPosition = sessionStorage.getItem('listFieldScrollPosition');
            if (listField && savedScrollPosition) {
                listField.scrollTop = parseInt(savedScrollPosition);
                sessionStorage.removeItem('listFieldScrollPosition');
            }
        }
        document.addEventListener("DOMContentLoaded", restoreScrollPosition)
        window.addEventListener('beforeunload', saveScrollPosition);
    </script>

<script type="text/javascript">

        async function populateCopyFromFields(formElementCombobox) {
            const fieldNamesSelect = document.getElementById('copyFromFieldNames');
            if (!fieldNamesSelect) return;

            const response = await fetch('@Url.Action("PopulateCopyFromFields", "Field")' + '?elementName=' + formElementCombobox.value);
            
            if (!response.ok) 
                return;

            fieldNamesSelect.innerHTML = await response.text();
        }
        
         function setupCodeMirror(){
            @if (Model.DataItem is not null)
            {
                <text>
                 CodeMirrorWrapper.setupCodeMirror("@Html.IdFor(m => m.DataItem!.Command!.Sql)",{
                     mode: "text/x-sql",
                     hintList: @Html.Raw(ViewBag.CodeMirrorHintList),
                     hintKey: '{'
                 });
                </text>

            }
             CodeMirrorWrapper.setupCodeMirror("@Html.NameFor(m => m.GridRenderingTemplate)",{
                 mode: "text/x-liquid",
                 hintList: @Html.Raw(ViewBag.CodeMirrorHintList),
                 hintKey: '{',
                 size: 320
             });
         }
         
         function listenTabs(){
            setupCodeMirror(); 
            
            const tabs = document.querySelectorAll('a[data-bs-toggle="tab"]')
            
            if(!tabs)
                return;
            
            tabs.forEach((tab)=>{
                 tab.addEventListener('shown.bs.tab', () => {
                     const codeMirrorElements = document.querySelectorAll(".CodeMirror");
                     if (codeMirrorElements){
                         codeMirrorElements.forEach(function (c){
                             c.CodeMirror.refresh();
                         })
                     }
                     else{
                        setupCodeMirror();
                     }
                 })
            })
         }

         document.addEventListener("DOMContentLoaded", listenTabs);
    
</script>

<script type="text/javascript">        
        document.addEventListener("DOMContentLoaded",function (){
            sortableGrid();
            saveTabState();
        })
        
    
        function saveTabState() {
            let currentTab = document.querySelector("#selected-tab").value;
            if (!currentTab) {
                currentTab = "#div-general";
            }
            
            let tabLinks = document.querySelectorAll("[data-bs-toggle='tab']");
            tabLinks.forEach(function(link) {
                if (link.getAttribute('href') === currentTab) {
                    link.classList.add('active');
                    link.classList.add('show');
                } else {
                    link.classList.remove('active');
                    link.classList.remove('remove');
                }
            });
            
            document.querySelectorAll(".tab-pane").forEach(function (tabPane){
              if (tabPane.id === currentTab.replace("#","")) {
                    tabPane.classList.add('active');
                    tabPane.classList.add('show');
                } else {
                    tabPane.classList.remove('active');
                    tabPane.classList.remove('remove');
                }
            })
        
            document.querySelector(currentTab).classList.add('active');
            document.querySelector(currentTab).classList.add('show');
            
            tabLinks.forEach(function(tabLink) {
                tabLink.addEventListener("click", function(e) {
                   
                    document.querySelector("#selected-tab").value = e.target.getAttribute("href");
                });
            });
        }
    
        function sortableGrid() {
            $("#sortable-grid").sortable({
                update: function () {
                    const order = $(this).sortable('toArray');
                    moveFields(order);
                }
            }).disableSelection();
        }
    
        function moveFields(order) {
            const formData = new FormData();
            formData.append('fieldsOrder', order);
            fetch('@Url.Action("Sort", new { elementName })', {
                method: "POST",
                body: formData
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('@StringLocalizer["Error while ordering fields."]');
                }
            })
            .catch(error => {
               messageBox.show('@StringLocalizer["Error"]', error.message, 4);
            });
        }

        function loadFieldDetails(url, fieldName) {
            const safeFieldName = fieldName.replace(/[^\w-]/g, '\\$&');

            document.querySelector("#sortable-grid .active")?.classList?.remove("active");

            if (safeFieldName !== "" && safeFieldName !== '\\_') {
                const element = document.querySelector("#" + safeFieldName);
                if (element) {
                    element.classList.add("active");
                }
            }

            SpinnerOverlay.show();

            fetch(url).then((response) => response.text()).then((html) => {
                HTMLHelper.setInnerHTML("field-details", html);

                listenAllEvents("#field-details");
                listenTabs();
                saveTabState();
                SpinnerOverlay.hide();
            });
        }
    
        function searchFields(oDom) {
            const value = $(oDom).val().toLowerCase();
            $("#sortable-grid a").filter(function () {
                const textValues = $(this).clone().find('.bootstrap-select, .selectpicker, select').remove().end().text();
                const isSearch = textValues.toLowerCase().indexOf(value) > -1;
    
                $(this).toggle(isSearch);
            });
        }
    </script>