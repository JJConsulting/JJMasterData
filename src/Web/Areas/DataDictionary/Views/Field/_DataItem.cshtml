@using JJMasterData.Core.Web
@using JJMasterData.Web.Areas.DataDictionary.Models.ViewModels
@using Microsoft.AspNetCore.Mvc.TagHelpers
@inject IStringLocalizer<JJMasterDataResources> StringLocalizer
@model FormElementField



@{
    bool showImage = Model.DataItem!.ShowImageLegend;
    bool isManualVal = Model.DataItem!.DataItemType == DataItemType.Manual;
}

<script lang="javascript" type="text/javascript">

    $(document).ready(function () {
        $("a[@BootstrapHelper.DataToggle='tab']").on("shown.bs.tab", function (e) {
            refreshCodeMirror();
        });
        buidCodeMirror();
    });

    function refreshCodeMirror() {
        var cm1 = $(".CodeMirror")[0];
        if (cm1 && cm1.CodeMirror) {
            cm1.CodeMirror.refresh();
        }

        var cm2 = $(".CodeMirror")[1];
        if (cm2 && cm2.CodeMirror) {
            cm2.CodeMirror.refresh();
        }
    }

    function buidCodeMirror() {
        var cm = CodeMirror.fromTextArea(document.getElementById('DataItem_Command_Sql'), {
            mode: "text/x-sql",
            indentWithTabs: true,
            smartIndent: true,
            lineNumbers: true,
            matchBrackets: true,
            autofocus: true,
            autohint: true,
            extraKeys: { "Ctrl-Space": "autocomplete" },
            hintOptions: {
                tables: {
                    AppUser: ["USR_ID", "USR_USERNAME", "USR_FIRSTNAME", "USR_LASTNAME", "USR_EMAIL", "USR_ISDISABLED"],
                    AppMenu: ["MNU_ID", "MNU_ORDER", "MNU_ICON", "MNU_LABEL", "MNU_TYPE", "MNU_ACTION"],
                }
            }
        });

        cm.setSize(null, 250);

        // Register our custom Codemirror hint plugin.
        CodeMirror.registerHelper('hint', 'dictionaryHint', function (editor) {
            var dictionary = @Html.Raw(ViewBag.HintDictionary);
            var cur = editor.getCursor();
            var curLine = editor.getLine(cur.line);
            var start = cur.ch;
            var end = start;
            return {
                list: dictionary,
                from: CodeMirror.Pos(cur.line, start),
                to: CodeMirror.Pos(cur.line, end)
            }
        });

        cm.on("keyup", function (cm, event) {
            if (!cm.state.completionActive && /*Enables keyboard navigation in autocomplete list*/
                event.keyCode == 219) {       /*Enter - do not open autocomplete list just after item has been selected in it*/
                CodeMirror.commands.autocomplete(cm, CodeMirror.hint.dictionaryHint, { completeSingle: false });
                //CodeMirror.showHint(cm, CodeMirror.hint.dictionaryHint);
            }
        });
    }

    function addDataItem(qtd) {
        SpinnerOverlay.show();
        $("<input>").attr({
            type: "hidden",
            id: "qtdRowsToAdd",
            name: "qtdRowsToAdd",
            value: qtd
        }).appendTo("form");

        const url = "@Url.Action("AddDataItem", new { dictionaryName = ViewBag.DictionaryName })";
        $("form:first").attr("action", url).submit();
    }

    function removeDataItem(dataItemIndex) {
        SpinnerOverlay.show();
        $("<input>").attr({
            type: "hidden",
            id: "dataItemIndex",
            name: "dataItemIndex",
            value: dataItemIndex
        }).appendTo("form");

        const url = "@Url.Action("RemoveDataItem", new { dictionaryName = ViewBag.DictionaryName })";
        $("form:first").attr("action", url).submit();
    }

    function removeAllDataItem() {
        SpinnerOverlay.show();
        const url = "@Url.Action("RemoveAllDataItem", new { dictionaryName = ViewBag.DictionaryName })";
        $("form:first").attr("action", url).submit();
    }

</script>

<div class="row">
    <div class="col-sm-12">
        <h4>@StringLocalizer["DataItem"]</h4>
        <hr/>
    </div>

    <div class="@BootstrapHelper.FormGroup col-sm-2 required">
        <label class="@BootstrapHelper.Label" for="dataItemType" @BootstrapHelper.GetDataToggle("tooltip") title="@StringLocalizer["List Type"]">@StringLocalizer["ListType"]</label>
        <select asp-for="DataItem!.DataItemType" onchange="this.form.submit();" class="form-control form-select">
            @if (Model.DataItem.DataItemType == DataItemType.Manual)
            {
                <option selected="selected" value="@((int)DataItemType.Manual)">@DataItemType.Manual.ToString()</option>
            }
            else
            {
                <option value="@((int)DataItemType.Manual)">@DataItemType.Manual.ToString()</option>
            }

            @if (Model.DataItem.DataItemType == DataItemType.SqlCommand)
            {
                <option selected="selected" value="@((int)DataItemType.SqlCommand)">@DataItemType.SqlCommand.ToString()</option>
            }
            else
            {
                <option value="@((int)DataItemType.SqlCommand)">@DataItemType.SqlCommand.ToString()</option>
            }
        </select>
    </div>

    <div class="@BootstrapHelper.FormGroup col-sm-2 required" id="divReplaceTextOnGrid">
        <label class="@BootstrapHelper.Label" @BootstrapHelper.GetDataToggle("tooltip") title="@StringLocalizer["Replace the field value with a description of the combination when displaying a grid"]">@StringLocalizer["ReplaceTextOnGrid"]</label>
        @Html.DropDownListFor(modelItem => modelItem.DataItem!.ReplaceTextOnGrid, new[]
        {
            new SelectListItem { Text = StringLocalizer["Yes"], Value = "true" },
            new SelectListItem { Text = StringLocalizer["No"], Value = "false" }
        },
            new { @class = "form-control form-select" })
    </div>

    @if (Model.Component is FormComponent.ComboBox)
    {
        <div class="@BootstrapHelper.FormGroup col-sm-2 required" id="divFirstOption">
            <label class="@BootstrapHelper.Label" @BootstrapHelper.GetDataToggle("tooltip") title="@StringLocalizer["Display text (All) as first option"]">@StringLocalizer["FirstOption"]</label>
            <select asp-for="DataItem!.FirstOption" class="form-control form-select" asp-items="Html.GetEnumSelectList<FirstOptionMode>()"></select>
        </div>
    }
    <div class="@BootstrapHelper.FormGroup col-sm-2 required">
        <label class="@BootstrapHelper.Label" @BootstrapHelper.GetDataToggle("tooltip") title="@StringLocalizer["Display images with text in the combo"]">@StringLocalizer["ShowImageLegend"]</label>
        @Html.DropDownListFor(modelItem => modelItem.DataItem!.ShowImageLegend, new[]
        {
            new SelectListItem { Text = StringLocalizer["No"], Value = "false" },
            new SelectListItem { Text = StringLocalizer["Yes"], Value = "true" }
        },
            new { @class = "form-control form-select", onchange = "this.form.submit();" })
    </div>
    
    @if (Model.Component is FormComponent.ComboBox)
    {
        <div class="@BootstrapHelper.FormGroup col-sm-2 required">
            <label class="@BootstrapHelper.Label" @BootstrapHelper.GetDataToggle("tooltip") title="@StringLocalizer["Be careful when using this option. You should probably use this option only for WriteOnly fields or store the values in another table."]">
                @StringLocalizer["Multiselect"]
            </label>
            <select class="form-control form-select" asp-for="DataItem!.EnableMultiSelect">
                <option value="true">@StringLocalizer["Yes"]</option>
                <option value="false">@StringLocalizer["No"]</option>
            </select>
        </div>
    }
    <div id="divManualValues" class="col-sm-12" style="@(isManualVal ? "" : "display:none")">
        <table class="table table-striped table-bordered table-hover">
            <thead>
            <tr>
                <th style="width:120px;">@StringLocalizer["Id"]</th>
                <th>@StringLocalizer["Description"]</th>
                @if (showImage)
                {
                    <th>@StringLocalizer["IconId"]</th>
                    <th>@StringLocalizer["Color"]</th>
                }
                <th style="width:60px;">@StringLocalizer["Remove"]</th>
            </tr>
            </thead>
            <tbody>
            @for (int i = 0; i < Model.DataItem.Items.Count; i++)
            {
                <tr>
                    <td>
                        @Html.TextBox("DataItem.Items[" + i + "].Id",
                            Model.DataItem.Items[i].Id, new { @class = "form-control" })
                    </td>
                    <td>
                        @Html.TextBox("DataItem.Items[" + i + "].Description",
                            Model.DataItem.Items[i].Description, new { @class = "form-control" })
                    </td>

                    @if (showImage)
                    {
                        <td>
                            @{
                                var iconId = $"DataItem_Items_{i}__Icon";
                            }

                            <div class="row">
                                <partial name="../Icons/_IconSearchBox" model="new IconViewModel { InputId = iconId, SelectedIcon = Model.DataItem.Items[i].Icon, EnablePopUp = false}"/>
                            </div>
                        </td>
                        <td>
                            @Html.TextBox("DataItem.Items[" + i + "].ImageColor",
                                Model.DataItem.Items[i].ImageColor, new { @class = "form-control", type = "color" })
                        </td>
                    }

                    <td align="center" valign="middle">
                        <a href="#" @BootstrapHelper.GetDataToggle("tooltip") title="@StringLocalizer["Remove"]" onclick="removeDataItem(@i);">
                            <span class="fa fa-trash"></span>
                        </a>
                    </td>
                </tr>
            }
            </tbody>
            <tfoot>
            <tr>
                <td colspan="@(showImage ? 5 : 3)">
                    <div class="btn-group dropup">
                        <button type="button" class="@BootstrapHelper.DefaultButton btn-small" onclick="addDataItem(1);">
                            <span class="fa fa-plus-circle"></span>
                            <span>&nbsp;@StringLocalizer["Add"]</span>
                        </button>
                        <button type="button" class="@BootstrapHelper.DefaultButton btn-small dropdown-toggle" @BootstrapHelper.GetDataToggle("dropdown") aria-haspopup="true" aria-expanded="false">
                            <span class="caret"></span>
                            <span class="sr-only">@StringLocalizer["Toggle Dropdown"]</span>
                        </button>
                        <ul class="dropdown-menu">
                           @for(var i = 2; i <= 10; i++)
                           {
                               <li class="dropdown-item">
                                   <a href="javascript:addDataItem(@i);">@i @StringLocalizer["Lines"]</a>
                               </li>
                           }
                        </ul>
                    </div>

                    <button class="@BootstrapHelper.DefaultButton btn-small" onclick="removeAllDataItem();">
                        <span class="fa fa-trash"></span>
                        <span>&nbsp;@StringLocalizer["Remove All"]</span>
                    </button>
                </td>
            </tr>
            </tfoot>
        </table>
    </div>

<div id="divSqlCommand" style="@(isManualVal ? "display:none" : "")">
    <div class="@BootstrapHelper.FormGroup col-sm-12 required">
        <label class="@BootstrapHelper.Label" @BootstrapHelper.GetDataToggle("tooltip") title="@StringLocalizer["PL-SQL Command"]">@StringLocalizer["Command.Sql"]</label>
        <span class="small @BootstrapHelper.TextRight text-info">&nbsp;@StringLocalizer["(Type Ctrl+Space to AutoComplete)"]</span>
        <div class="well" style="margin-bottom: 0px">
            @Html.TextAreaFor(model => model.DataItem!.Command.Sql, new { @class = "form-control", rows = "10" })
        </div>
    </div>
    <label class="small col-sm-12">
        <span class="text-info fa fa-info-circle"></span>
        @if (showImage)
        {
            <span>@StringLocalizer["Return four columns in query 1 = Id, 2 = Description, 3 = ImageId, 4 = Color in Hexa(#ffffff)"]</span>
        }
        else
        {
            <span>@StringLocalizer["Return two columns in query 1 = Id, 2 = Description"]</span>
        }
        <br/><br/>
        <b>@StringLocalizer["We recommend using the parameters to be passed in the procedure:"]</b><br/>
        @if (Model.Component == FormComponent.Search)
        {
            <span>
                @StringLocalizer["{search_id} retrieves the list record from the found ID that can be used in the query filter condition"]<br/>
                @StringLocalizer["{search_text} passage of typed text that can be used with the LIKE command in the query."]<br/>
                <i>@StringLocalizer["Optimizing the reading of SEARCH component records"]</i>
            </span>
        }
        else if (Model.Component == FormComponent.ComboBox)
        {
            <span>
                @StringLocalizer["{search_id} retrieves the list record from the found ID that can be used in the query filter condition"]
            </span>
        }
    </label>
    <div class="col-sm-12">
        <br/>
    </div>
</div>
</div>