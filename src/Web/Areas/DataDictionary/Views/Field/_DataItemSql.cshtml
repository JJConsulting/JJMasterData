@using JJMasterData.Core.Web
@model JJMasterData.Core.DataDictionary.FormElementField


@inject IStringLocalizer<JJMasterDataResources> StringLocalizer
@{
    bool showImage = Model.DataItem!.ShowIcon;
}

<script>
    document.addEventListener("DOMContentLoaded", function () {
         $("a[@BootstrapHelper.DataToggle='tab']").on("shown.bs.tab", function () {
             refreshCodeMirror();
         });
         buildCodeMirror();
    });


    function refreshCodeMirror() {
        const codeMirror = $(".CodeMirror");
        const cm1 = codeMirror[0];
        if (cm1 && cm1.CodeMirror) {
            cm1.CodeMirror.refresh();
        }

        const cm2 = codeMirror[1];
        if (cm2 && cm2.CodeMirror) {
            cm2.CodeMirror.refresh();
        }
    }

    function buildCodeMirror() {
        var cm = CodeMirror.fromTextArea(document.getElementById('DataItem_Command_Sql'), {
            mode: "text/x-sql",
            indentWithTabs: true,
            smartIndent: true,
            lineNumbers: true,
            matchBrackets: true,
            autofocus: true,
            autohint: true,
            extraKeys: { "Ctrl-Space": "autocomplete" },
            hintOptions: {
                tables: {
                    AppUser: ["USR_ID", "USR_USERNAME", "USR_FIRSTNAME", "USR_LASTNAME", "USR_EMAIL", "USR_ISDISABLED"],
                    AppMenu: ["MNU_ID", "MNU_ORDER", "MNU_ICON", "MNU_LABEL", "MNU_TYPE", "MNU_ACTION"],
                }
            }
        });

        cm.setSize(null, 250);

        // Register our custom Codemirror hint plugin.
        CodeMirror.registerHelper('hint', 'dictionaryHint', function (editor) {
            const dictionary = @Html.Raw(ViewBag.HintDictionary);
            const cur = editor.getCursor();
            const start = cur.ch;
            const end = start;
            return {
                list: dictionary,
                from: CodeMirror.Pos(cur.line, start),
                to: CodeMirror.Pos(cur.line, end)
            }
        });

        cm.on("keyup", function (cm, event) {
            if (!cm.state.completionActive && /*Enables keyboard navigation in autocomplete list*/
                event.keyCode == 219) {       /*Enter - do not open autocomplete list just after item has been selected in it*/
                CodeMirror.commands.autocomplete(cm, CodeMirror.hint.dictionaryHint, { completeSingle: false });
                //CodeMirror.showHint(cm, CodeMirror.hint.dictionaryHint);
            }
        });
    }
</script>

<div id="divSqlCommand" >
    <div class="@BootstrapHelper.FormGroup col-sm-12 required">
        <label class="@BootstrapHelper.Label" @BootstrapHelper.GetDataToggle("tooltip") title="@StringLocalizer["PL-SQL Command"]">@StringLocalizer["Command.Sql"]</label>
        <span class="small @BootstrapHelper.TextRight text-info">&nbsp;@StringLocalizer["(Type Ctrl+Space to AutoComplete)"]</span>
        <div class="well" style="margin-bottom: 0px">
            @Html.TextAreaFor(model => model.DataItem!.Command!.Sql, new { @class = "form-control", rows = "10" })
        </div>
    </div>
    <label class="small col-sm-12">
        <span class="text-info fa fa-info-circle"></span>
        @if (showImage)
        {
            <span>@StringLocalizer["Return four columns in query 1 = Id, 2 = Description, 3 = ImageId, 4 = Color in Hexa(#ffffff)"]</span>
        }
        else
        {
            <span>@StringLocalizer["Return two columns in query 1 = Id, 2 = Description"]</span>
        }
        <br/><br/>
        <b>@StringLocalizer["We recommend using the parameters to be passed in the procedure:"]</b><br/>
        @if (Model.Component == FormComponent.Search)
        {
            <span>
                @StringLocalizer["{search_id} retrieves the list record from the found ID that can be used in the query filter condition"]<br/>
                @StringLocalizer["{search_text} passage of typed text that can be used with the LIKE command in the query."]<br/>
                <i>@StringLocalizer["Optimizing the reading of SEARCH component records"]</i>
            </span>
        }
        else if (Model.Component == FormComponent.ComboBox)
        {
            <span>
                @StringLocalizer["{search_id} retrieves the list record from the found ID that can be used in the query filter condition"]
            </span>
        }
    </label>
    <div class="col-sm-12">
        <br/>
    </div>
</div>