@using JJMasterData.Core.DataDictionary.Models
@inject IStringLocalizer<MasterDataResources> StringLocalizer
@model ElementScriptsViewModel


@functions{

    void ScriptCode(string? script)
    {
        <div class="jjrelative">
            <div class="bs-clipboard">
                <div class="btn-group">
                    <button type="button" class="@BootstrapHelper.BtnDefault btn-small btn-sm" onclick="copyContent(this);" data-placement="top" @BootstrapHelper.GetDataToggle("tooltip") title="@StringLocalizer["Copy to Clipboard"]">
                        <span class="fa fa-copy fa-fw"></span>
                        &nbsp;@StringLocalizer["Copy"]
                    </button>
                    @if (Model.Scripts.ContainsAlterTableScript || Model.Scripts.UseReadProcedure || Model.Scripts.UseWriteProcedure)
                    {
                        <div class="btn-group" role="group">
                            <button type="button" class="@BootstrapHelper.BtnDefault dropdown-toggle btn-small btn-sm" data-toggle="dropdown" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <span class="caret"></span>
                                <span class="sr-only">Toggle Dropdown</span>
                            </button>

                            <ul class="dropdown-menu dropdown-menu-end">
                                <li>
                                    <a class="dropdown-item" onclick="copyAll(this);" href="#">@StringLocalizer["Copy All Scripts"]</a>
                                </li>
                            </ul>
                        </div>
                    }

                </div>
            </div>
            <pre><code>@script</code></pre>
        </div>
    }

}

<div class="row">
    <div class="col-sm-12">
        @if (Model.Scripts.UseReadProcedure || Model.Scripts.UseWriteProcedure)
        {
            <button class="@BootstrapHelper.BtnDefault" type="button" value="ExecuteProcedures" onclick="executeScripts(this.value)">
                <span class="@IconType.SolidScroll.GetCssClass()"></span>
                @switch (Model)
                {
                    case { Scripts: { UseReadProcedure: true, UseWriteProcedure: false } }:
                        <span>&nbsp; @StringLocalizer["Create or Alter Read Procedure"]</span>
                        break;
                    case { Scripts: { UseWriteProcedure: true, UseReadProcedure: false } }:
                        <span>&nbsp; @StringLocalizer["Create or Alter Write Procedure"]</span>
                        break;
                    default:
                        <span>&nbsp; @StringLocalizer["Create or Alter All Stored Procedures"]</span>
                        break;
                }
            </button>
        }

        @if (!Model.TableExists)
        {
            <button class="@BootstrapHelper.BtnDefault" type="button" value="ExecuteCreateDataModel" onclick="executeScripts(this.value)">
                <span class="@IconType.Table.GetCssClass()"></span>
                @if (Model is { Scripts: { UseReadProcedure: true, UseWriteProcedure: false } })
                {
                    <span>&nbsp; @StringLocalizer["Create Table And Read Procedure"]</span>
                }
                else if (Model is { Scripts: { UseWriteProcedure: true, UseReadProcedure: false } })
                {
                    <span>&nbsp; @StringLocalizer["Create Table And Write Procedure"]</span>
                }
                else if (Model is { Scripts: { UseWriteProcedure: false, UseReadProcedure: false } })
                {
                    <span>&nbsp; @StringLocalizer["Create Table"]</span>
                }
                else
                {
                    <span>&nbsp; @StringLocalizer["Create Table And All Stored Procedures"]</span>
                }
            </button>
        }

        @if (Model.Scripts.ContainsAlterTableScript)
        {
            <button class="@BootstrapHelper.BtnDefault" type="button" value="ExecuteAlterTable" onclick="executeScripts(this.value)">
                <span class="fa-solid fa-border-top-left"></span>
                <span>&nbsp; @StringLocalizer["Execute Alter Table"]</span>
            </button>
        }
    </div>
</div>
<br/>

<ul class="nav nav-underline" id="tabScript">
    <li class="nav-item @(BootstrapHelper.Version == 3 ? "active" : string.Empty)">
        <a id="Table" class="nav-link @(BootstrapHelper.Version > 3 ? "active" : string.Empty)" @BootstrapHelper.GetDataToggle("tab") href="#divTable">@StringLocalizer["Table"]</a>
    </li>
    @if (Model.Scripts.UseReadProcedure)
    {
        <li class="nav-item">
            <a id="ProcGet" class="nav-link" @BootstrapHelper.GetDataToggle("tab") href="#divProcGet">
                @StringLocalizer["Read Procedure"]
            </a>
        </li>
    }
    @if (Model.Scripts.UseWriteProcedure)
    {
        <li class="nav-item">
            <a id="ProcSet" class="nav-link" @BootstrapHelper.GetDataToggle("tab") href="#divProcSet">
                @StringLocalizer["Write Procedure"]
            </a>
        </li>
    }
    @if (Model.Scripts.ContainsAlterTableScript)
    {
        <li class="nav-item">
            <a id="AlterTable" class="nav-link" @BootstrapHelper.GetDataToggle("tab") href="#divAlterTable">
                @StringLocalizer["Alter Table"]
            </a>
        </li>
    }


</ul>

<div class="tab-content">

    <div id="divTable" class="tab-pane fade in active @(BootstrapHelper.Version > 3 ? "show" : string.Empty)">
        @{
            ScriptCode(Model.Scripts.CreateTableScript);
        }
    </div>

    @if (Model.Scripts.UseReadProcedure)
    {
        <div id="divProcGet" class="tab-pane fade">
            @{
                ScriptCode(Model.Scripts.ReadProcedureScript);
            }
        </div>
    }
    @if (Model.Scripts.UseWriteProcedure)
    {
        <div id="divProcSet" class="tab-pane fade">
            @{
                ScriptCode(Model.Scripts.WriteProcedureScript);
            }
        </div>
    }

    @if (Model.Scripts.ContainsAlterTableScript)
    {
        <div id="divAlterTable" class="tab-pane fade">
            @{
                ScriptCode(Model.Scripts.AlterTableScript);
            }
        </div>
    }
</div>


<script type="text/javascript" src="~/_content/JJMasterData.Web/js/highlightjs/highlight.min.js"></script>
<script type="text/javascript" src="~/_content/JJMasterData.Web/js/highlightjs/languages/tsql.min.js"></script>
<script type="text/javascript">

    function copyAll(obj) {
        let textVal = document.querySelector("#divTable pre").textContent.trim();
        
        @if (Model.Scripts.UseReadProcedure)
        {
            <text>
                textVal += "\r\n";
                textVal += document.querySelector("#divProcGet pre").textContent.trim();
            </text>
        }
        @if (Model.Scripts.UseWriteProcedure)
        {
            <text>
                textVal += "\r\n";
                textVal += document.querySelector("#divProcSet pre").textContent.trim();
            </text>
        }

        copyText(textVal);
    }
    
    function copyContent(obj) {
        const objName = document.querySelector(".tab-content .active").getAttribute("id");
        let textVal = document.querySelector("#" + objName + " pre").textContent.trim();
        copyText(textVal);
        displayAsCopied(obj);
    }
    
    function displayAsCopied(obj) {
        const btnContent = obj.innerHTML;
        obj.innerHTML = "<span class='fa fa-check'></span> Copied!";
        obj.classList.remove("btn");
        obj.classList.remove("btn-small");
        obj.classList.remove("btn-sm");
        obj.classList.add("btn");
        obj.classList.add("btn-success");
        obj.classList.add("btn-small");
        obj.classList.add("btn-sm");
    
        setTimeout(function() {
            obj.innerHTML = btnContent;
            obj.classList.remove("btn");
            obj.classList.remove("btn-success");
            obj.classList.remove("btn-small");
            obj.classList.remove("btn-sm");
            obj.classList.add("btn");
            obj.classList.add("btn-small");
            obj.classList.add("btn-sm");
        }, 2000);
    }
    
    function copyText(value) {
        navigator.clipboard.writeText(value);
    }
    
     function executeScripts(value) {
         const formData = new FormData();
         formData.append('scriptOption', value);
     
         fetch('@Url.Action("Scripts", "Element", new { elementName = Model.ElementName })', {
             method: 'POST',
             body: formData
         })
         .then((response) =>response.json())
         .then((data)=>{

              if (data.success) {
                  defaultModal.hide();
              }
              else{
    
                 throw new Error(data.message);
              }
             })
         .catch(function(error) {
             SpinnerOverlay.hide();
             messageBox.show("@StringLocalizer["Error"]", error?.message, 3);
         });
     }

    hljs.highlightAll();
</script>