@using Microsoft.AspNetCore.Html
@using JJMasterData.Commons.Localization
@using JJMasterData.Core.Web
@{
    Layout = "_MasterDataLayout.Popup";
}

@{

    IHtmlContent? GetIdBs3(string name)
    {
        return BootstrapHelper.Version > 3 ? Html.Raw("id=\"" + name + "\"") : null;
    }

    IHtmlContent? GetIdBs4(string name)
    {
        return BootstrapHelper.Version > 3 ? Html.Raw("id=\"" + name + "\"") : null;
    }
}

@functions{

    void ScriptCode(string script)
    {
        <div class="jjrelative">
            <div class="bs-clipboard">
                <div class="btn-group">
                    <button type="button" class="@BootstrapHelper.DefaultButton btn-small btn-sm" onclick="copyContent(this);" data-placement="top" @BootstrapHelper.GetDataToggle("tooltip") title="@Translate.Key("Copy to Clipboard")">
                        <span class="fa fa-copy fa-fw"></span>
                        &nbsp;@Translate.Key("Copy")
                    </button>
                    <div class="btn-group" role="group">
                        <button type="button" class="@BootstrapHelper.DefaultButton dropdown-toggle btn-small btn-sm" data-toggle="dropdown" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <span class="caret"></span>
                            <span class="sr-only">Toggle Dropdown</span>
                        </button>
                        <ul class="dropdown-menu dropdown-menu-right">
                            <li><a class="dropdown-item" onclick="copyAll(this);" href="#">@Translate.Key("Copy All Scripts")</a></li>
                        </ul>
                    </div>
                </div>
            </div>
            <pre><code>@script</code></pre>
        </div>
    }
}

<style>
        
</style>

<div class="row">
    <div class="col-sm-12">
        <button class="@BootstrapHelper.DefaultButton" type="button" value="Exec" onclick="executeScripts(this.value)">
            <span class="fa fa-play"></span>
            <span>&nbsp; @Translate.Key("Execute Stored Procedures")</span>
        </button>

        <button class="@BootstrapHelper.DefaultButton" type="button" value="ExecAll" onclick="executeScripts(this.value)">
            <span class="fa fa-forward"></span>
            <span>&nbsp; @Translate.Key("Run All")</span>
        </button>
    </div>
</div>
<br />

<ul class="nav nav-tabs" id="tabScript">
    <li class="nav-item @(BootstrapHelper.Version == 3 ? "active" : string.Empty)" @GetIdBs3("Table")>
        <a @GetIdBs4("Table") class="nav-link @(BootstrapHelper.Version > 3 ? "active" : string.Empty)" @BootstrapHelper.GetDataToggle("tab") href="#divTable">@Translate.Key("Table")</a>
    </li>
    <li class="nav-item" @GetIdBs3("ProcGet")>
        <a @GetIdBs4("ProcGet") class="nav-link" @BootstrapHelper.GetDataToggle("tab") href="#divProcGet">
            @Translate.Key("Get Procedure")
        </a>
    </li>
    <li class="nav-item" @GetIdBs3("ProcSet")>
        <a @GetIdBs4("ProcSet") class="nav-link" @BootstrapHelper.GetDataToggle("tab") href="#divProcSet">
            @Translate.Key("Set Procedure")
        </a>
    </li>
</ul>

<div class="tab-content">
    
    <div id="divTable" class="tab-pane fade in active @(BootstrapHelper.Version > 3 ? "show" : string.Empty)">
        @{
            ScriptCode(ViewBag.Scripts[0]);
        }
    </div>
    <div id="divProcGet" class="tab-pane fade">
       @{
            ScriptCode(ViewBag.Scripts[1]);
        }
    </div>
    <div id="divProcSet" class="tab-pane fade">
       @{
            ScriptCode(ViewBag.Scripts[2]);
        }
    </div>
    
</div>

@section Scripts
{
    <script type="text/javascript" src="~/js/highlightjs/highlight.min.js"></script>
    <script type="text/javascript" src="~/js/highlightjs/languages/tsql.min.js"></script>
    <script type="text/javascript">
    
    function copyAll(obj) {
            let textVal = $("#divTable pre").text().trim();
            textVal += "\r\n";
            textVal += $("#divProcGet pre").text().trim();
            textVal += "\r\n";
            textVal += $("#divProcSet pre").text().trim();
            
            copyText(textVal);
        }
    
        function copyContent(obj) {
            const objName = $(".tab-content .active").first().attr("id");
            let textVal =  $("#" + objName + " pre").text().trim();
            copyText(textVal);
            displayAsCopied(obj);
        }
    
        function displayAsCopied(obj) {
             var btnContent = $(obj).html();
            $(obj).html("<span class='fa fa-check'></span> Copied!")
                .attr("class", "btn btn-success btn-small btn-sm");

            setTimeout(function() {
                $(obj).html(btnContent)
                    .attr("class", "@BootstrapHelper.DefaultButton btn-small btn-sm");
            },2000);
        }

        function copyText(value) {
            navigator.clipboard.writeText(value);
        }
    
        function executeScripts(value) {
             $.ajax({
                url: '@Url.Action("Scripts", "Element", new { dictionaryName = ViewBag.DictionaryName })',
                type: 'POST',
                data: {
                    scriptExec: value
                },
                dataType: 'json',
                success: function (response) {
                    window.parent.popup.hide();
                 },
                 error: function (xhr, status, error) {
                     messageWait.hide();
                     if (xhr.responseText != "") {
                         var err = JSON.parse(xhr.responseText);
    
                         if (err.status == 401) {
                             window.parent.forms[0].submit();
                         }
                         else {
                             messageBox.show("@Translate.Key("Error")", err.message, 4);
                         }
                     }
                     else {
                         messageBox.show("@Translate.Key("Error")","@Translate.Key("Unexpected error")", 4);
                     }
                 }
            });
        }
    
        hljs.highlightAll();
    </script>
}
