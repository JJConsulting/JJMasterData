
@using JJMasterData.Web.Areas.DataDictionary.Models
@model UIOptions

<style>
    input[type=checkbox] {
        margin: 2px 0 0;
    }
</style>

<partial name="_Menu" model="@(new DataDictionaryViewModel(ViewBag.DictionaryName, ViewBag.MenuId))"/>

@functions
{
    async Task GridView()
    {
        <div class="col-sm-4">
            <div class="checkbox">
                <label for="ShowTitle">
                    @Html.CheckBox("ShowTitle", Model.Grid.ShowTitle, new { disabled = "disabled" })
                    <b>@Translate.Key("ShowTitle")</b><br/>
                    @Translate.Key("Show title in page header")
                </label>
            </div>
        </div>

        <div class="col-sm-4">
            <div class="checkbox">
                <label for="EnableAjax">
                    @Html.CheckBox("EnableAjax", true, new { disabled = "disabled" })
                    <b>@Translate.Key("EnableAjax")</b><br/>
                    @Translate.Key("Post via Ajax")
                </label>
            </div>
        </div>

        <div class="col-sm-4">
            <div class="checkbox">
                <label for="EnableSorting">
                    @Html.CheckBox("EnableSorting", Model.Grid.EnableSorting, new { disabled = "disabled" })
                    <b>@Translate.Key("EnableSorting")</b><br/>
                    @Translate.Key("Enable Column Sorting")
                </label>
            </div>
        </div>

        <div class="col-sm-4">
            <div class="checkbox">
                <label for="EnableMultSelect">
                    @Html.CheckBox("EnableMultSelect", Model.Grid.EnableMultSelect, new { disabled = "disabled" })
                    <b>@Translate.Key("Enable MultSelect")</b><br/>
                    @Translate.Key("Allows you to select multiple lines in the grid")
                </label>
            </div>
        </div>

        <div class="col-sm-4">
            <div class="checkbox">
                <label for="MaintainValuesOnLoad">
                    @Html.CheckBox("MaintainValuesOnLoad", Model.Grid.MaintainValuesOnLoad, new { disabled = "disabled" })
                    <b>@Translate.Key("MaintainValuesOnLoad")</b><br/>
                    @Translate.Key("Maintains grid filters, order and pagination")
                </label>
            </div>
        </div>

        <div class="col-sm-4">
            <div class="checkbox">
                <label for="ShowRowHover">
                    @Html.CheckBox("ShowRowHover", Model.Grid.ShowRowHover, new { disabled = "disabled" })
                    <b>@Translate.Key("ShowRowHover")</b><br/>
                    @Translate.Key("Change a line color on mouseover")
                </label>
            </div>
        </div>

        <div class="col-sm-4">
            <div class="checkbox">
                <label for="ShowRowStriped">
                    @Html.CheckBox("ShowRowStriped", Model.Grid.ShowRowStriped, new { disabled = "disabled" })
                    <b>@Translate.Key("ShowRowStriped")</b><br/>
                    @Translate.Key("display zebra columns")
                </label>
            </div>
        </div>

        <div class="col-sm-4">
            <div class="checkbox">
                <label for="ShowBorder">
                    @Html.CheckBox("ShowBorder", Model.Grid.ShowBorder, new { disabled = "disabled" })
                    <b>@Translate.Key("ShowBorder")</b><br/>
                    @Translate.Key("Show border on grid")
                </label>
            </div>
        </div>

        <div class="col-sm-4">
            <div class="checkbox">
                <label for="ShowToolBar">
                    @Html.CheckBox("ShowToolBar", Model.Grid.ShowToolBar, new { disabled = "disabled" })
                    <b>@Translate.Key("ShowToolbar")</b><br/>
                    @Translate.Key("Show ToolBar on grid")
                </label>
            </div>
        </div>

        <div class="col-sm-4">

            <div class="checkbox">
                <label for="ShowPagging">
                    @Html.CheckBox("ShowPagging", Model.Grid.ShowPagging, new { disabled = "disabled" })
                    <b>@Translate.Key("ShowPagging")</b><br/>
                    @Translate.Key("Displays paging controls")
                </label>
            </div>

        </div>
        <div class="col-sm-4">
            <label class="@BootstrapHelper.Label" @BootstrapHelper.GetDataToggle("tooltip") title="@Translate.Key("Total Records per page")">@Translate.Key("TotalPerPage")</label>
            @Html.TextBox("TotalPerPage", Model.Grid.TotalPerPage, new { text = "5", @class = "form-control", width = "90px", disabled = "disabled" })
        </div>

        <div class="col-sm-4">
            <label class="@BootstrapHelper.Label" @BootstrapHelper.GetDataToggle("tooltip") title="@Translate.Key("Total buttons on paging")">@Translate.Key("TotalPaggingButton")</label>
            @Html.TextBox("TotalPaggingButton", Model.Grid.TotalPaggingButton, new { text = "5", @class = "form-control", width = "90px", disabled = "disabled", style = "margin-botton:10px" })
        </div>


        <div class="col-sm-4">
            <div class="checkbox">
                <label for="ShowHeaderWhenEmpty">
                    @Html.CheckBox("ShowHeaderWhenEmpty", Model.Grid.ShowHeaderWhenEmpty, new { disabled = "disabled" })
                    <b>@Translate.Key("ShowHeaderWhenEmpty")</b><br/>
                    @Translate.Key("Indicates whether the gridview header will be visible when there is no data")
                </label>
            </div>
        </div>

        <div class="col-sm-8">
            <label class="@BootstrapHelper.Label" @BootstrapHelper.GetDataToggle("tooltip") title="@Translate.Key("Text applied when there are no records to be applied")">@Translate.Key("EmptyDataText")</label>
            @Html.TextBox("EmptyDataText", Model.Grid.EmptyDataText, new { text = "Não existe registro para ser exibido", disabled = "disabled", @class = "form-control" })
        </div>


        <div class="col-sm-4">
            <div class="checkbox">
                <label for="HeaderFixed">
                    @Html.CheckBox("HeaderFixed", Model.Grid.HeaderFixed, new { disabled = "disabled" })
                    <b>@Translate.Key("Header Fixed")</b><br/>
                    @Translate.Key("Fix the grid header when scrolling")
                </label>
            </div>
        </div>
    }

    async Task FormView()
    {
        <div class="col-sm-4">
            <label class="@BootstrapHelper.Label" @BootstrapHelper.GetDataToggle("tooltip") title="@Translate.Key("Number of columns where fields will be rendered by default")">@Translate.Key("FormCols")</label>
            @Html.DropDownListFor(model => Model.Form.FormCols, new[]
            {
                new SelectListItem { Text = Translate.Key("1 (one column)"), Value = "1" },
                new SelectListItem { Text = Translate.Key("2 (two columns)"), Value = "2" },
                new SelectListItem { Text = Translate.Key("3 (three columns)"), Value = "3" },
                new SelectListItem { Text = Translate.Key("4 (four columns)"), Value = "4" },
                new SelectListItem { Text = Translate.Key("6 (six columns)"), Value = "6" },
                new SelectListItem { Text = Translate.Key("12 (twelve columns)"), Value = "12" },
            }, new { @class = "form-control" })
        </div>

        <div class="col-sm-4">
            <label class="@BootstrapHelper.Label" @BootstrapHelper.GetDataToggle("tooltip") title="@Translate.Key("Horizontal label layout on left side of field, vertical label layout above field")">@Translate.Key("LayoutFields")</label>
            @Html.DropDownListFor(model => Model.Form.IsVerticalLayout, new[]
            {
                new SelectListItem { Text = Translate.Key("VERTICAL"), Value = "true" },
                new SelectListItem { Text = Translate.Key("HORIZONTAL"), Value = "false" }
            }, new { @class = "form-control", disabled = "disabled" })
        </div>

        <div class="col-sm-4">
            <div class="checkbox">
                <label for="ShowViewModeAsStatic">
                    @Html.CheckBox("ShowViewModeAsStatic", Model.Form.ShowViewModeAsStatic, new { disabled = "disabled" })
                    <b>@Translate.Key("ShowViewModeAsStatic")</b><br/>
                    @Translate.Key("When the panel is not in preview mode ")
                    @Translate.Key("remover as bordas dos campos exibindo como texto.")
                </label>
            </div>
        </div>

        <div class="@BootstrapHelper.FormGroup col-sm-4 required">
            <label class="@BootstrapHelper.Label " for="FormEnterKey" @BootstrapHelper.GetDataToggle("tooltip") title="@Translate.Key("Behavior of the Enter key on the form")">@Translate.Key("EnterKey")</label>
            <select asp-for="Form.EnterKey" disabled="disabled" class="form-control form-select" asp-items="Html.GetEnumSelectList<FormEnterKey>()"></select>
        </div>
    }


}

<div class="row">
    <div class="col-sm-12">
        <button name="action" type="button" onclick="location.href='@Url.Action("Edit", new { dictionaryName = ViewBag.DictionaryName })'" class="@BootstrapHelper.DefaultButton btn-small">
            <span class="fa fa-pencil"></span>
            <span>&nbsp;@Translate.Key("Edit")</span>
        </button>
    </div>
</div>


<br/>

@if (BootstrapHelper.Version == 5)
{
    <div class="accordion pb-1" id="gridAccordion">
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingOne">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                    @Translate.Key("GridView")
                </button>
            </h2>
            <div id="collapseOne" class="accordion-collapse show" aria-labelledby="headingOne" data-bs-parent="#gridAccordion">
                <div class="accordion-body">
                    <div class="container-fluid">
                        <div class="row">
                            @{ await GridView();}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="accordion pb-1" id="formAccordion">
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingOne">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="true" aria-controls="collapseTwo">
                    @Translate.Key("FormView")
                </button>
            </h2>
            <div id="collapseTwo" class="accordion-collapse" aria-labelledby="headingOne" data-bs-parent="#formAccordion">
                <div class="accordion-body">
                    <div class="container-fluid">
                        <div class="row">
                            @{ await FormView(); }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="panel-group">
        <div id="pnl_div_resumo" class="@BootstrapHelper.GetPanel("default")">
            <div class="@BootstrapHelper.GetPanelHeading("default")" href="#collapseResumo2" @BootstrapHelper.GetDataToggle("collapse") data-target="#collapseResumo" aria-expanded="true">
                <h5 class="@BootstrapHelper.PanelTitle">
                    @Translate.Key("GridView")
                </h5>
            </div>
            <div id="collapseResumo" class="@BootstrapHelper.PanelCollapse">
                <div class="@BootstrapHelper.PanelBody">
                    <div class="container-fluid">
                        <div class="row">
                            @{ await GridView(); }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="@BootstrapHelper.PanelGroup">
        <div id="pnl_formview" class="@BootstrapHelper.GetPanel("default")">
            <div class="@BootstrapHelper.GetPanelHeading("default")" href="#collapseFormView" @BootstrapHelper.GetDataToggle("collapse") data-target="#collapseFormView" aria-expanded="true">
                <h5 class="@BootstrapHelper.PanelTitle">@Translate.Key("FormView")</h5>
            </div>
            <div id="collapseFormView" class="@BootstrapHelper.PanelCollapse">
                <div class="@BootstrapHelper.PanelBody">
                    <div class="container-fluid">
                        <div class="row">
                            @{ await FormView(); }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<br/>
<br/>