@inject IStringLocalizer<MasterDataResources> StringLocalizer
@model ElementScriptsViewModel


@functions{
    void Code(string? script)
    {
        <div class="jjrelative">
            <div class="bs-clipboard">
                <div class="btn-group">
                    <button type="button" class="btn btn-secondary btn-small btn-sm" onclick="copyContent(this);" data-placement="top" data-bs-toggle="tooltip" title="@StringLocalizer["Copy to Clipboard"]">
                        <span class="fa fa-copy fa-fw"></span>
                        &nbsp;@StringLocalizer["Copy"]
                    </button>
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-secondary dropdown-toggle btn-small btn-sm" data-toggle="dropdown" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <span class="caret"></span>
                            <span class="sr-only">Toggle Dropdown</span>
                        </button>

                        <ul class="dropdown-menu dropdown-menu-end">
                            <li>
                                <button class="dropdown-item" onclick="copyAll();">@StringLocalizer["Copy All Scripts"]</button>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
            <pre><code>@script</code></pre>
        </div>
    }

}

<div class="row">
    <div class="col-sm-12">
        @if (Model.Scripts.UseReadProcedure || Model.Scripts.UseWriteProcedure)
        {
            var procType = (Model.Scripts.UseReadProcedure, Model.Scripts.UseWriteProcedure) switch
            {
                (true, false) => "read",
                (false, true) => "write",
                _ => "all"
            };

            <button class="btn btn-secondary"
                    type="button"
                    value="ExecuteProcedures"
                    data-proc-type="@procType"
                    onclick="confirmAndExecuteScripts(this)">
                <span class="fa-solid fa-scroll"></span>
                <span>&nbsp;
                    @switch (procType)
                    {
                        case "read":
                            @StringLocalizer["Create or Alter Read Procedure"]
                            break;
                        case "write":
                            @StringLocalizer["Create or Alter Write Procedure"]
                            break;
                        default:
                            @StringLocalizer["Create or Alter All Stored Procedures"]
                            break;
                    }
                </span>
            </button>
        }

        @if (!Model.TableExists)
        {
            <button class="btn btn-secondary" type="button" value="ExecuteCreateDataModel" onclick="confirmAndExecuteScripts(this)">
                <span class="fa fa-table"></span>
                @switch (Model)
                {
                    case { Scripts: { UseReadProcedure: true, UseWriteProcedure: false } }:
                        <span>&nbsp; @StringLocalizer["Create Table And Read Procedure"]</span>
                        break;
                    case { Scripts: { UseWriteProcedure: true, UseReadProcedure: false } }:
                        <span>&nbsp; @StringLocalizer["Create Table And Write Procedure"]</span>
                        break;
                    case { Scripts: { UseWriteProcedure: false, UseReadProcedure: false } }:
                        <span>&nbsp; @StringLocalizer["Create Table"]</span>
                        break;
                    default:
                        <span>&nbsp; @StringLocalizer["Create Table And All Stored Procedures"]</span>
                        break;
                }
            </button>
        }

        @if (Model.Scripts.ContainsAlterTableScript)
        {
            <button class="btn btn-secondary" type="button" value="ExecuteAlterTable" onclick="executeScripts(this.value)">
                <span class="fa-solid fa-border-top-left"></span>
                <span>&nbsp; @StringLocalizer["Execute Alter Table"]</span>
            </button>
        }
    </div>
</div>
<br/>

<ul class="nav nav-underline">
    <li class="nav-item">
        <a id="Table" class="nav-link active" data-bs-toggle="tab" href="#create-table-div">@StringLocalizer["Table"]</a>
    </li>

    <li class="nav-item">
        <a id="ProcGet" class="nav-link" data-bs-toggle="tab" href="#read-proc-div">
            @StringLocalizer["Read Procedure"]
        </a>
    </li>
    

    <li class="nav-item">
        <a id="ProcSet" class="nav-link" data-bs-toggle="tab" href="#write-proc-div">
            @StringLocalizer["Write Procedure"]
        </a>
    </li>
    
    @if (Model.Scripts.ContainsAlterTableScript)
    {
        <li class="nav-item">
            <a id="AlterTable" class="nav-link" data-bs-toggle="tab" href="#divAlterTable">
                @StringLocalizer["Alter Table"]
            </a>
        </li>
    }


</ul>

<div class="tab-content">

    <div id="create-table-div" class="tab-pane fade in active @(BootstrapHelper.Version > 3 ? "show" : string.Empty)">
        @{
            Code(Model.Scripts.CreateTableScript);
        }
    </div>


    <div id="read-proc-div" class="tab-pane fade">
        @{
            Code(Model.Scripts.ReadProcedureScript);
        }
    </div>
    
    <div id="write-proc-div" class="tab-pane fade">
        @{
            Code(Model.Scripts.WriteProcedureScript);
        }
    </div>

    @if (Model.Scripts.ContainsAlterTableScript)
    {
        <div id="divAlterTable" class="tab-pane fade">
            @{
                Code(Model.Scripts.AlterTableScript);
            }
        </div>
    }
</div>


<script type="text/javascript">
    function copyAll() {
        let textVal = document.querySelector("#create-table-div pre").textContent.trim();
        
        @if (Model.Scripts.UseReadProcedure)
        {
            <text>
                textVal += "\r\n";
                textVal += document.querySelector("#read-proc-div pre").textContent.trim();
            </text>
        }
        @if (Model.Scripts.UseWriteProcedure)
        {
            <text>
                textVal += "\r\n";
                textVal += document.querySelector("#write-proc-div pre").textContent.trim();
            </text>
        }

        copyText(textVal);
    }
    
    function copyContent(obj) {
        const objName = obj.closest(".tab-content").querySelector(".active").getAttribute("id");
        const textVal = document.querySelector("#" + objName + " pre").textContent.trim();
        copyText(textVal);
        displayAsCopied(obj);
    }
    
    let scriptsCopyButttonIsChecked = false;
    function displayAsCopied(obj) {
        if (!scriptsCopyButttonIsChecked){
            const originalContent = obj.innerHTML;
            obj.innerHTML = "<span class='fa fa-check'></span> Copied!";
            obj.className = "btn btn-success btn-sm";
            scriptsCopyButttonIsChecked = true;
            setTimeout(() => {

                obj.innerHTML = originalContent;
                obj.className = "btn btn-secondary btn-sm";
                scriptsCopyButttonIsChecked = false;
            }, 2000);
        }

    }

    function copyText(value) {
        navigator.clipboard.writeText(value);
    }

    async function executeScripts(value) {
        const formData = new FormData();
        formData.append('scriptOption', value);

        try {
            const response = await fetch('@Url.Action("Scripts", "Element", new { elementName = Model.ElementName })', {
                method: 'POST',
                body: formData
            });

            const data = await response.json();

            if (data.success) {
                OffcanvasHelper.hide("sql-scripts-offcanvas");
            } else {
                SpinnerOverlay.hide();
                messageBox.show("@StringLocalizer["Error"]", data?.message, 3);
            }
        } catch (error) {
            SpinnerOverlay.hide();
            messageBox.show("@StringLocalizer["Error"]", error?.message, 3);
        }
    }

    function confirmAndExecuteScripts(btn) {
        const value = btn.value;
        const procType = btn.dataset.procType;
        let message = null;

        switch (procType) {
            case "read":
                message = '@Html.Raw(StringLocalizer["Do you want to recreate the read procedure? Any modifications made to the procedure will be lost."])';
                break;
            case "write":
                message = '@Html.Raw(StringLocalizer["Do you want to recreate the write procedure? Any changes made to the procedure will be lost."])';
                break;
            case "all":
                message = '@Html.Raw(StringLocalizer["Do you want to recreate all procedures? Any modifications made to the procedures will be lost."])';
                break;
        }
        
        if (message) {
            if (confirm(message)) {
                executeScripts(value);
            }
        } else {
            executeScripts(value);
        }
    }
    
    hljs.highlightAll();
</script>